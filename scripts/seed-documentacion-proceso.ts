import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

const documentacionProcesoData = [
  {
    nombre: "Manual de Procedimientos de Acreditaci√≥n",
    descripcion: "Documento principal que describe todos los procedimientos para el proceso de acreditaci√≥n aeroportuaria",
    proceso: "Acreditaci√≥n",
    categoria: "Manual Principal",
    version: "2.1",
    obligatorio: true,
    estado: "ACTIVO" as const
  },
  {
    nombre: "Formulario de Solicitud de Acreditaci√≥n",
    descripcion: "Formulario oficial para solicitar acreditaci√≥n en aeropuertos",
    proceso: "Acreditaci√≥n",
    categoria: "Formulario",
    version: "1.5",
    obligatorio: true,
    estado: "ACTIVO" as const
  },
  {
    nombre: "Lista de Verificaci√≥n de Documentos",
    descripcion: "Checklist de documentos requeridos para el proceso de acreditaci√≥n",
    proceso: "Acreditaci√≥n",
    categoria: "Lista de Verificaci√≥n",
    version: "1.3",
    obligatorio: true,
    estado: "ACTIVO" as const
  },
  {
    nombre: "Protocolo de Verificaci√≥n de Antecedentes",
    descripcion: "Procedimientos para verificar los antecedentes de solicitantes",
    proceso: "Verificaci√≥n",
    categoria: "Protocolo",
    version: "2.0",
    obligatorio: true,
    estado: "ACTIVO" as const
  },
  {
    nombre: "Manual de Seguridad Aeroportuaria",
    descripcion: "Gu√≠a completa de procedimientos de seguridad en aeropuertos",
    proceso: "Seguridad",
    categoria: "Manual",
    version: "3.2",
    obligatorio: true,
    estado: "ACTIVO" as const
  },
  {
    nombre: "Gu√≠a de Acceso a √Åreas Restringidas",
    descripcion: "Procedimientos para otorgar y controlar acceso a √°reas restringidas",
    proceso: "Control de Acceso",
    categoria: "Gu√≠a",
    version: "1.8",
    obligatorio: true,
    estado: "ACTIVO" as const
  },
  {
    nombre: "Formato de Evaluaci√≥n de Riesgos",
    descripcion: "Plantilla para evaluar riesgos en el proceso de acreditaci√≥n",
    proceso: "Evaluaci√≥n",
    categoria: "Formato",
    version: "1.2",
    obligatorio: false,
    estado: "ACTIVO" as const
  },
  {
    nombre: "Procedimiento de Renovaci√≥n de Acreditaciones",
    descripcion: "Pasos para renovar acreditaciones existentes",
    proceso: "Renovaci√≥n",
    categoria: "Procedimiento",
    version: "1.4",
    obligatorio: true,
    estado: "ACTIVO" as const
  },
  {
    nombre: "Manual de Capacitaci√≥n para Personal",
    descripcion: "Gu√≠a de capacitaci√≥n para personal involucrado en acreditaciones",
    proceso: "Capacitaci√≥n",
    categoria: "Manual",
    version: "2.3",
    obligatorio: false,
    estado: "ACTIVO" as const
  },
  {
    nombre: "Protocolo de Emergencias",
    descripcion: "Procedimientos de emergencia relacionados con acreditaciones",
    proceso: "Emergencias",
    categoria: "Protocolo",
    version: "1.6",
    obligatorio: true,
    estado: "ACTIVO" as const
  },
  {
    nombre: "Gu√≠a de Auditor√≠a Interna",
    descripcion: "Procedimientos para realizar auditor√≠as internas del proceso",
    proceso: "Auditor√≠a",
    categoria: "Gu√≠a",
    version: "1.1",
    obligatorio: false,
    estado: "ACTIVO" as const
  },
  {
    nombre: "Matriz de Responsabilidades",
    descripcion: "Documento que define roles y responsabilidades en el proceso",
    proceso: "Gesti√≥n",
    categoria: "Matriz",
    version: "1.0",
    obligatorio: true,
    estado: "ACTIVO" as const
  },
  {
    nombre: "Procedimiento de Apelaciones",
    descripcion: "Proceso para manejar apelaciones de decisiones de acreditaci√≥n",
    proceso: "Apelaciones",
    categoria: "Procedimiento",
    version: "1.3",
    obligatorio: true,
    estado: "ACTIVO" as const
  },
  {
    nombre: "Manual de Uso del Sistema",
    descripcion: "Gu√≠a para el uso del sistema de gesti√≥n de acreditaciones",
    proceso: "Sistema",
    categoria: "Manual",
    version: "2.0",
    obligatorio: false,
    estado: "ACTIVO" as const
  },
  {
    nombre: "Pol√≠tica de Protecci√≥n de Datos",
    descripcion: "Pol√≠ticas para el manejo y protecci√≥n de datos personales",
    proceso: "Protecci√≥n de Datos",
    categoria: "Pol√≠tica",
    version: "1.7",
    obligatorio: true,
    estado: "ACTIVO" as const
  }
];

async function seedDocumentacionProceso() {
  console.log('üå± Iniciando seed de Documentaci√≥n de Proceso...');

  try {
    // Limpiar datos existentes (opcional)
    await prisma.documentacionProceso.deleteMany({});
    console.log('üóëÔ∏è Datos existentes eliminados');

    // Insertar nueva documentaci√≥n
    for (const doc of documentacionProcesoData) {
      const created = await prisma.documentacionProceso.create({
        data: doc
      });
      console.log(`‚úÖ Creado: ${created.nombre} - ${created.proceso}`);
    }

    console.log(`üéâ Seed completado: ${documentacionProcesoData.length} documentos creados`);

    // Mostrar estad√≠sticas
    const stats = await prisma.documentacionProceso.groupBy({
      by: ['proceso'],
      _count: {
        proceso: true
      }
    });

    console.log('\nüìä Estad√≠sticas por proceso:');
    stats.forEach(stat => {
      console.log(`   ${stat.proceso}: ${stat._count.proceso} documentos`);
    });

  } catch (error) {
    console.error('‚ùå Error durante el seed:', error);
    throw error;
  }
}

async function main() {
  try {
    await seedDocumentacionProceso();
  } catch (error) {
    console.error('üí• Error en main:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

if (require.main === module) {
  main();
}

export { seedDocumentacionProceso };